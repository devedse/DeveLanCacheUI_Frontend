@using static System.Net.WebRequestMethods;
@inject HttpClient Http

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">
            <img src="DeveLanCacheUI.png" alt="logo" width="30" height="30">
            DeveLanCacheUI
        </a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu" style="position: relative;">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="chattest">
                <span class="oi oi-list-rich" aria-hidden="true"></span> SignalR Chat Test
            </NavLink>
        </div>
        <hr /> <!-- Here is the separator -->
        <h3 class="nav-link px-3" style="color:white">  LanCache</h3>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="latestdownloads">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Latest Downloads
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="steamlatestdownloads">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Steam Latest Downloads
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="downloadstats">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Download Stats
            </NavLink>
        </div>
    </nav>
    <hr />
    <div class="nav-item px-3">
        <button class="btn btn-secondary" @onclick="ToggleTheme">Toggle Dark Mode</button>
    </div>
    <div class="version-info px-3" style="position: absolute; bottom: 10px; color: white; font-weight: bold;">
        <small>Frontend Version: @FrontendVersion</small>
        <small>Backend Version: @BackendVersion</small>
    </div>
</div>

<style>
    :root, [data-bs-theme="light"] {
        --button-color: #007bff; /* Light theme button color (blue) */
        --bs-primary: #007bff; /* Color for light theme border */
    }

    [data-bs-theme="dark"] {
        --button-color: #6c757d; /* Dark theme button color (grey) */
        --bs-primary: #6c757d; /* Color for dark theme border */
    }

    .btn-secondary {
        background-color: var(--button-color);
        border-color: var(--button-color);
    }

        .btn-secondary:focus {
            box-shadow: 0 0 0 var(--bs-focus-width) rgba(var(--bs-focus-inner-color), var(--bs-focus-color-opacity)) !important;
        }

    hr {
        border-top-color: rgb(173, 181, 189);
    }
</style>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string backendUrl;

    private string FrontendVersion { get; set; }
    private string BackendVersion { get; set; }

    @inject IJSRuntime JSRuntime

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        string preferredColorScheme = await JSRuntime.InvokeAsync<string>("themeSwitcher.getPreferredColorScheme");
        IsDarkMode = preferredColorScheme == "dark";
        await JSRuntime.InvokeVoidAsync("themeSwitcher.switchTheme", preferredColorScheme);

        backendUrl = await JSRuntime.InvokeAsync<string>("eval", "window.ENV.BACKENDURL");
        if (!backendUrl.EndsWith("/"))
        {
            backendUrl += "/";
        }
        Console.WriteLine($"Loaded Backend Url: {backendUrl}");

        FrontendVersion = GetVersion();

        BackendVersion = await GetBackendVersion();
    }

    private string GetVersion()
    {
        var assembly = System.Reflection.Assembly.GetExecutingAssembly();
        var version = assembly.GetName().Version.ToString();
        return version;
    }

    private async Task<string> GetBackendVersion()
    {
        var status = await Http.GetFromJsonAsync<StatusModel>($"{backendUrl}Status");
        return status.Version;
    }

    public class StatusModel
    {
        public string ApplicationName { get; set; }
        public string Version { get; set; }
        public string UpTime { get; set; }
    }

    private bool IsDarkMode { get; set; }

    private async Task ToggleTheme()
    {
        IsDarkMode = !IsDarkMode;
        await JSRuntime.InvokeVoidAsync("themeSwitcher.switchTheme", IsDarkMode ? "dark" : "light");
    }
}
