@using DeveLanCacheUI_Frontend.Services;
@using static System.Net.WebRequestMethods;
@inject HttpClient Http
@inject BackendConnectionService _backendConnectionService
@inject Blazored.LocalStorage.ISyncLocalStorageService _localStorage

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">
            <img src="DeveLanCacheUI.png" alt="logo" width="30" height="30">
            DeveLanCacheUI
        </a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu" style="position: relative;">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @*<div class="nav-item px-3">
        <NavLink class="nav-link" href="chattest">
        <span class="oi oi-list-rich" aria-hidden="true"></span> SignalR Chat Test
        </NavLink>
        </div> *@
        <hr /> <!-- Here is the separator -->
        <h3 class="nav-link px-3" style="color:white">  LanCache</h3>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="latestdownloads">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Latest Downloads
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="steamlatestdownloads">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Steam Latest Downloads
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="downloadstats">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Download Stats
            </NavLink>
        </div>
    </nav>
    <hr />
    <div class="nav-item px-3">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="darkModeSwitch" @bind="IsDarkMode">
            <label class="form-check-label light-label" for="darkModeSwitch">Dark Mode</label>
        </div>
    </div>
    <div class="nav-item px-3">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="hashImagesSwitch" @bind="HashImagesEnabled">
            <label class="form-check-label light-label" for="hashImagesSwitch">Hash Images</label>
        </div>
    </div>
    <div class="nav-item px-3">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="compactLayoutSwitch" @bind="CompactLayoutEnabled">
            <label class="form-check-label light-label" for="compactLayoutSwitch">Compact Layout</label>
        </div>
    </div>
    <div class="version-info px-3" style="position: absolute; bottom: 10px; color: white; font-weight: bold; font-size: 10pt;">
        <small>Frontend Version: @FrontendVersion</small>
        <small>Backend Version: @BackendStatus?.Version</small>
        @if (!string.IsNullOrEmpty(BackendStatus?.SteamDepotVersion))
        {
            <small>Steam Depot Version: @BackendStatus?.SteamDepotVersion</small>
        }

        @if (BackendStatus?.SteamChangeNumber != null)
        {
            <small>Steam Change Number: @BackendStatus?.SteamChangeNumber</small>
        }
    </div>
</div>

<style>
    .light-label {
        color: #d7d7d7;
    }

    hr {
        border-top-color: rgb(173, 181, 189);
    }

    .version-info small {
        display: block;
    }
</style>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string FrontendVersion { get; set; }
    private StatusModel BackendStatus { get; set; }

    @inject IJSRuntime JSRuntime

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        var localStorageDarkModeEnabled = _localStorage.GetItem<bool?>(LocalStorageField.DarkModeEnabled);
        if (localStorageDarkModeEnabled == null)
        {
            string preferredColorScheme = await JSRuntime.InvokeAsync<string>("themeSwitcher.getPreferredColorScheme");
            localStorageDarkModeEnabled = preferredColorScheme == "dark";
        }
        IsDarkMode = localStorageDarkModeEnabled.Value;
        await SetDarkMode(IsDarkMode);

        FrontendVersion = GetFrontendVersion();
        BackendStatus = await GetBackendVersion();
    }

    private string GetFrontendVersion()
    {
        var assembly = System.Reflection.Assembly.GetExecutingAssembly();
        var version = assembly.GetName().Version.ToString();
        return version;
    }

    private async Task<StatusModel> GetBackendVersion()
    {
        try
        {
            var statusUrl = await _backendConnectionService.CreateBackendUrlAsync("Status");
            var status = await Http.GetFromJsonAsync<StatusModel>(statusUrl);
            return status;
        }
        catch (Exception ex)
        {
            return new StatusModel()
                {
                    Version = "???",
                    SteamDepotVersion = "???",
                    SteamChangeNumber = "???",
                    UpTime = "0"
                };
        }
    }

    public class StatusModel
    {
        public string ApplicationName { get; set; }
        public string Version { get; set; }
        public string? SteamDepotVersion { get; set; }
        public string? SteamChangeNumber { get; set; }
        public string UpTime { get; set; }
    }

    private bool _isDarkMode;
    private bool IsDarkMode
    {
        get => _isDarkMode;
        set
        {
            _isDarkMode = value;
            _ = SetDarkMode(_isDarkMode);
        }
    }

    private async Task SetDarkMode(bool enabled)
    {
        await JSRuntime.InvokeVoidAsync("themeSwitcher.switchTheme", enabled ? "dark" : "light");
        _localStorage.SetItem(LocalStorageField.DarkModeEnabled, enabled);
    }

    private bool? _hashImagesEnabled;
    private bool HashImagesEnabled
    {
        get
        {
            if (_hashImagesEnabled != null)
            {
                return _hashImagesEnabled.Value;
            }
            return _localStorage.GetItem<bool?>(LocalStorageField.HashImagesEnabled) ?? false;
        }
        set
        {
            _hashImagesEnabled = value;
            _localStorage.SetItem(LocalStorageField.HashImagesEnabled, value);
        }
    }

    private bool? _compactLayoutEnabled;
    private bool CompactLayoutEnabled
    {
        get
        {
            if (_compactLayoutEnabled != null)
            {
                return _compactLayoutEnabled.Value;
            }
            return _localStorage.GetItem<bool?>
                (LocalStorageField.CompactLayoutEnabled) ?? false;
        }
        set
        {
            _compactLayoutEnabled = value;
            _localStorage.SetItem(LocalStorageField.CompactLayoutEnabled, value);
        }
    }
}
