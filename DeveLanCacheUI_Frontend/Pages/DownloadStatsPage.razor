@page "/downloadstats"
@using DeveLanCacheUI_Frontend.Configuration;
@using DeveLanCacheUI_Frontend.Services;
@using Microsoft.AspNetCore.SignalR.Client;
@using DeveLanCacheUI_Frontend.ApiModels;
@inject HttpClient Http
@inject BackendConnectionService _backendConnectionService
@inject Blazored.LocalStorage.ISyncLocalStorageService _localStorage
@inject NavigationManager Navigation

<PageTitle>Download Stats</PageTitle>

<h1>
    Download Stats
    <span class="status-ball @(hubConnection?.State == HubConnectionState.Connected ? "connected" : "disconnected")"
          title="@(hubConnection?.State == HubConnectionState.Connected ? "Connected" : "Disconnected")">
    </span>
    @if (loading)
    {
        <span class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </span>
    }
</h1>

<table id="clientStats" class="table">
    <thead>
        <tr>
            <th>Client IP</th>
            <th>Total Cache Hit Bytes</th>
            <th>Total Cache Miss Bytes</th>
        </tr>
    </thead>
    <tbody>
        @{
            var totalMissService = clientDownloadStats.Sum(t => t.TotalCacheMissBytes);
            var totalHitService = clientDownloadStats.Sum(t => t.TotalCacheHitBytes);
            var uberTotalSerivce = totalMissService + totalHitService;
            foreach (var stats in clientDownloadStats.OrderByDescending(t => t.TotalCacheHitBytes))
            {
                double cacheHitPercent = 0.0;
                double cacheMissPercent = 0.0;
                if ((stats.TotalCacheMissBytes + stats.TotalCacheHitBytes) != 0)
                {
                    cacheHitPercent = Math.Round(((double)stats.TotalCacheHitBytes / (uberTotalSerivce)) * 100, 2);
                    cacheMissPercent = Math.Round(((double)stats.TotalCacheMissBytes / (uberTotalSerivce)) * 100, 2);
                }
                <tr class="@(_localStorage.GetItem<bool>(LocalStorageField.CompactLayoutEnabled) ? "compact-layout" : "")">
                    <td>
                        @if (backendBaseUrl != null && _localStorage.GetItem<bool>(LocalStorageField.HashImagesEnabled))
                        {
                            <div>@stats.Identifier</div>
                            <div><img class="hashimage" src="@($"{backendBaseUrl}RoboHash/{stats.Identifier}?format=png&sizeX={DeveLanCacheUIConstants.HashImageSize}&sizeY={DeveLanCacheUIConstants.HashImageSize}")" title="@stats.Identifier" alt="Client Image" /></div>
                        }
                        else
                        {
                            @stats.Identifier
                        }
                    </td>
                    <td>
                        <progress max="100" value="@cacheHitPercent"></progress>
                        @($"{DeveCoolLib.Conversion.ValuesToStringHelper.BytesToString(stats.TotalCacheHitBytes)} ({cacheHitPercent}%)")
                    </td>
                    <td>
                        <progress max="100" value="@cacheMissPercent"></progress>
                        @($"{DeveCoolLib.Conversion.ValuesToStringHelper.BytesToString(stats.TotalCacheMissBytes)} ({cacheMissPercent}%)")
                    </td>
                </tr>
            }
            <tr>
                <td>Total</td>
                <td>@DeveCoolLib.Conversion.ValuesToStringHelper.BytesToString(totalHitService)</td>
                <td>@DeveCoolLib.Conversion.ValuesToStringHelper.BytesToString(totalMissService)</td>
            </tr>
        }
    </tbody>
</table>
<h2>Service Download Stats</h2>
<table id="serviceStats" class="table">
    <thead>
        <tr>
            <th>Service</th>
            <th>Total Cache Hit Bytes</th>
            <th>Total Cache Miss Bytes</th>
        </tr>
    </thead>
    <tbody>
        @{
            var totalMissClients = serviceDownloadStats.Sum(t => t.TotalCacheMissBytes);
            var totalHitClients = serviceDownloadStats.Sum(t => t.TotalCacheHitBytes);
            var uberTotalClients = totalMissService + totalHitService;
            foreach (var stats in serviceDownloadStats.OrderByDescending(t => t.TotalCacheHitBytes))
            {
                double cacheHitPercent = 0.0;
                double cacheMissPercent = 0.0;
                if ((stats.TotalCacheMissBytes + stats.TotalCacheHitBytes) != 0)
                {
                    cacheHitPercent = Math.Round(((double)stats.TotalCacheHitBytes / (uberTotalClients)) * 100, 2);
                    cacheMissPercent = Math.Round(((double)stats.TotalCacheMissBytes / (uberTotalClients)) * 100, 2);
                }
                <tr class="@(_localStorage.GetItem<bool>(LocalStorageField.CompactLayoutEnabled) ? "compact-layout" : "")">
                    <td>@stats.Identifier</td>
                    <td>
                        <progress max="100" value="@cacheHitPercent"></progress>
                        @($"{DeveCoolLib.Conversion.ValuesToStringHelper.BytesToString(stats.TotalCacheHitBytes)} ({cacheHitPercent}%)")
                    </td>
                    <td>
                        <progress max="100" value="@cacheMissPercent"></progress>
                        @($"{DeveCoolLib.Conversion.ValuesToStringHelper.BytesToString(stats.TotalCacheMissBytes)} ({cacheMissPercent}%)")
                    </td>
                </tr>
            }
            <tr>
                <td>Total</td>
                <td>@DeveCoolLib.Conversion.ValuesToStringHelper.BytesToString(totalHitClients)</td>
                <td>@DeveCoolLib.Conversion.ValuesToStringHelper.BytesToString(totalMissClients)</td>
            </tr>
        }

    </tbody>
</table>
@code {
    private List<DownloadStats> clientDownloadStats = new List<DownloadStats>();
    private List<DownloadStats> serviceDownloadStats = new List<DownloadStats>();

    private HubConnection hubConnection;

    private bool loading = true;

    public string? backendBaseUrl;

    protected override async Task OnInitializedAsync()
    {
        _localStorage.Changed += (sender, eventArgs) => StateHasChanged();

        await LoadData();

        backendBaseUrl = await _backendConnectionService.GetBackendBaseUrlAsync();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri($"{backendBaseUrl}lancachehub"))
            .Build();

        hubConnection.On("UpdateDownloadEvents", async () =>
        {
            Console.WriteLine($"{DateTime.Now}: UpdateDownloadEvents");
            await LoadData();
        });

        await hubConnection.StartAsync();
    }

    private async Task LoadData()
    {
        loading = true;
        StateHasChanged();
        var getDownloadStatsPerClientUrl = await _backendConnectionService.CreateBackendUrlAsync("DownloadStats/GetDownloadStatsPerClient");
        var newClientStats = await Http.GetFromJsonAsync<DownloadStats[]>(getDownloadStatsPerClientUrl);
        if (newClientStats != null)
        {
            clientDownloadStats = newClientStats.ToList();
        }
        var getDownloadStatsPerServiceUrl = await _backendConnectionService.CreateBackendUrlAsync("DownloadStats/GetDownloadStatsPerService");
        var newServiceStats = await Http.GetFromJsonAsync<DownloadStats[]>(getDownloadStatsPerServiceUrl);
        if (newServiceStats != null)
        {
            serviceDownloadStats = newServiceStats.ToList();
        }
        loading = false;
        StateHasChanged();
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

<style>

</style>